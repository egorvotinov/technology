#ifndef _MY_COMPLEX_H_
#define _MY_COMPLEX_H_

#include <iostream>

/**
 * @brief Класс для работы с комплексными числами.
 *
 * Этот класс позволяет выполнять различные операции с комплексными числами, включая арифметические операции,
 * методы для получения модуля комплексного числа и перегрузку операторов для удобства работы с комплексными числами.
 */
class Complex {
private:
    double Re; ///< Вещественная часть комплексного числа
    double Im; ///< Мнимая часть комплексного числа

public:
    /**
     * @brief Конструктор комплексного числа.
     *
     * Конструктор инициализирует комплексное число с заданными значениями вещественной и мнимой частей.
     * По умолчанию инициализирует вещественную часть значением 0, а мнимую часть - значением 0.
     *
     * @param aRe Вещественная часть комплексного числа (по умолчанию 0)
     * @param aIm Мнимая часть комплексного числа (по умолчанию 0)
     */
    Complex(double aRe = 0, double aIm = 0);

    /**
     * @brief Конструктор копирования.
     *
     * Этот конструктор создает копию другого объекта типа Complex.
     *
     * @param other Объект типа Complex, который будет скопирован
     */
    Complex(const Complex& other);

    /**
     * @brief Деструктор.
     *
     * Деструктор освобождает ресурсы объекта, если это необходимо (например, для работы с динамической памятью).
     */
    ~Complex();

    /**
     * @brief Устанавливает значение комплексного числа.
     *
     * Этот метод позволяет изменить вещественную и мнимую части комплексного числа.
     *
     * @param aRe Новое значение вещественной части
     * @param aIm Новое значение мнимой части
     */
    void Set(double aRe, double aIm = 0);

    /**
     * @brief Возвращает модуль комплексного числа.
     *
     * Метод вычисляет модуль (абсолютную величину) комплексного числа с использованием формулы
     * |z| = sqrt(Re^2 + Im^2).
     *
     * @return Модуль комплексного числа
     */
    double abs() const;

    /**
     * @brief Оператор преобразования в тип double.
     *
     * Оператор позволяет преобразовать комплексное число в его модуль (вещественное число типа double).
     *
     * @return Модуль комплексного числа
     */
    operator double() const;

    /**
     * @brief Оператор сложения двух комплексных чисел.
     *
     * Этот оператор выполняет сложение двух комплексных чисел: (a + b) = (a.Re + b.Re) + (a.Im + b.Im) * i.
     *
     * @param other Комплексное число, которое нужно прибавить
     * @return Результат сложения
     */
    Complex operator+(const Complex& other) const;

    /**
     * @brief Оператор вычитания двух комплексных чисел.
     *
     * Этот оператор выполняет вычитание двух комплексных чисел: (a - b) = (a.Re - b.Re) + (a.Im - b.Im) * i.
     *
     * @param other Комплексное число, которое нужно вычесть
     * @return Результат вычитания
     */
    Complex operator-(const Complex& other) const;

    /**
     * @brief Оператор сложения комплексного числа с вещественным числом.
     *
     * Этот оператор выполняет сложение комплексного числа с вещественным числом.
     * Результат: (a + b) = (a.Re + b) + a.Im * i.
     *
     * @param value Вещественное число, которое нужно прибавить
     * @return Результат сложения
     */
    Complex operator+(const double& value) const;

    /**
     * @brief Оператор вычитания вещественного числа из комплексного.
     *
     * Этот оператор выполняет вычитание вещественного числа из комплексного числа.
     * Результат: (a - b) = (a.Re - b) + a.Im * i.
     *
     * @param value Вещественное число, которое нужно вычесть
     * @return Результат вычитания
     */
    Complex operator-(const double& value) const;

    /**
     * @brief Оператор умножения двух комплексных чисел.
     *
     * Этот оператор выполняет умножение двух комплексных чисел: (a * b) = (a.Re * b.Re - a.Im * b.Im) + (a.Re * b.Im + a.Im * b.Re) * i.
     *
     * @param other Комплексное число, на которое нужно умножить
     * @return Результат умножения
     */
    Complex operator*(const Complex& other) const;

    /**
     * @brief Оператор умножения комплексного числа на вещественное.
     *
     * Этот оператор выполняет умножение комплексного числа на вещественное число.
     * Результат: (a * b) = (a.Re * b) + (a.Im * b) * i.
     *
     * @param value Вещественное число, на которое нужно умножить
     * @return Результат умножения
     */
    Complex operator*(const double& value) const;

    /**
     * @brief Оператор деления комплексного числа на вещественное.
     *
     * Этот оператор выполняет деление комплексного числа на вещественное число.
     * Результат: (a / b) = (a.Re / b) + (a.Im / b) * i.
     *
     * @param value Вещественное число, на которое нужно разделить
     * @return Результат деления
     */
    Complex operator/(const double& value) const;

    /**
     * @brief Оператор присваивания с сложением двух комплексных чисел.
     *
     * Этот оператор выполняет сложение с присваиванием: (a += b) = (a.Re += b.Re) + (a.Im += b.Im) * i.
     *
     * @param other Комплексное число, которое нужно прибавить
     * @return Результат сложения с присваиванием
     */
    Complex& operator+=(const Complex& other);

    /**
     * @brief Оператор присваивания с вычитанием двух комплексных чисел.
     *
     * Этот оператор выполняет вычитание с присваиванием: (a -= b) = (a.Re -= b.Re) + (a.Im -= b.Im) * i.
     *
     * @param other Комплексное число, которое нужно вычесть
     * @return Результат вычитания с присваиванием
     */
    Complex& operator-=(const Complex& other);

    /**
     * @brief Оператор присваивания с умножением двух комплексных чисел.
     *
     * Этот оператор выполняет умножение с присваиванием: (a *= b) = (a.Re *= b.Re) + (a.Im *= b.Im) * i.
     *
     * @param other Комплексное число, которое нужно умножить
     * @return Результат умножения с присваиванием
     */
    Complex& operator*=(const Complex& other);

    /**
     * @brief Оператор присваивания с добавлением вещественного числа.
     *
     * Этот оператор выполняет добавление вещественного числа с присваиванием: (a += b) = (a.Re += b).
     *
     * @param value Вещественное число, которое нужно прибавить
     * @return Результат добавления с присваиванием
     */
    Complex& operator+=(const double& value);

    /**
     * @brief Оператор присваивания с вычитанием вещественного числа.
     *
     * Этот оператор выполняет вычитание вещественного числа с присваиванием: (a -= b) = (a.Re -= b).
     *
     * @param value Вещественное число, которое нужно вычесть
     * @return Результат вычитания с присваиванием
     */
    Complex& operator-=(const double& value);

    /**
     * @brief Оператор присваивания с умножением на вещественное число.
     *
     * Этот оператор выполняет умножение на вещественное число с присваиванием: (a *= b) = (a.Re *= b) + (a.Im *= b).
     *
     * @param value Вещественное число, на которое нужно умножить
     * @return Результат умножения с присваиванием
     */
    Complex& operator*=(const double& value);

    /**
     * @brief Оператор присваивания с делением на вещественное число.
     *
     * Этот оператор выполняет деление на вещественное число с присваиванием: (a /= b) = (a.Re /= b) + (a.Im /= b).
     *
     * @param value Вещественное число, на которое нужно разделить
     * @return Результат деления с присваиванием
     */
    Complex& operator/=(const double& value);

    /**
     * @brief Оператор присваивания копирования.
     *
     * Этот оператор присваивает значения одного комплексного числа другому.
     *
     * @param other Комплексное число, которое нужно присвоить
     * @return Результат присваивания
     */
    Complex& operator=(const Complex& other);

    /**
     * @brief Оператор присваивания вещественного числа.
     *
     * Этот оператор присваивает вещественное число в комплексное число, обнуляя мнимую часть.
     *
     * @param value Вещественное число, которое нужно присвоить
     * @return Результат присваивания
     */
    Complex& operator=(const double& value);

    /**
     * @brief Ввод комплексного числа.
     *
     * Оператор позволяет вводить значения комплексного числа в виде строки вида "Re Im".
     *
     * @param in Поток ввода
     * @param complex Комплексное число для ввода
     * @return Поток ввода
     */
    friend std::istream& operator>>(std::istream& in, Complex& complex);

    /**
     * @brief Вывод комплексного числа.
     *
     * Оператор выводит комплексное число в виде "Re+Im*i", где Re - вещественная часть, Im - мнимая часть.
     *
     * @param out Поток вывода
     * @param complex Комплексное число для вывода
     * @return Поток вывода
     */
    friend std::ostream& operator<<(std::ostream& out, const Complex& complex);
};

#endif
